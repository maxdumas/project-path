//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Text;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class CombatWindow : MonoBehaviour
{
    public Player player;
    public Monster MonsterPrefab;
	public SpriteRenderer PlayerSpritePrefab;
	public SpriteRenderer BackgroundPrefab;

	public SpriteRenderer PoisonDebuff;
	public SpriteRenderer BlindDebuff;


    private SpriteRenderer MonsterSprite;
	private SpriteRenderer PlayerSprite;
    private SpriteRenderer Background;
	private Monster monster;

	private Animator PlayerAnimator;
	private Animator MonsterAnimator;

	private float PlayerCombatSpeed = 0.5f;
	private float NextPlayerCombat = 0.0f;
	private float PlayerPause = 0.1f;

	private float MonsterCombatSpeed = 1.0f;
	private float NextMonsterCombat = 0.0f;
	private float MonsterPause = 1.0f;

	private int MonsterNumAttacks = 1;
	private int MonsterCurrAttacks = 0;

	private bool IsPlayerDefending = false;
	private bool IsMonsterDefending = false;


	//Attack Chances based on Accuracy and Evasion
	private float PlayerAttackChance;
	private float MonsterAttackChance;

	//Poison
	private float PlayerNextPoisonTick = 0.0f;
	private float MonsterNextPoisonTick = 0.0f;

	//Blind
	private float PlayerBlindLength = 0.0f;
	private float MonsterBlindLength = 0.0f;
	

	private float roll;

	//private List<SpriteRenderer> PlayerBuffs = new List<SpriteRenderer>();
	//private List<SpriteRenderer> MonsterBuffs = new List<SpriteRenderer>();

	private Dictionary<string,SpriteRenderer> PlayerBuffs;// = new Dictionary<string,SpriteRenderer>();
	private Dictionary<string,SpriteRenderer> MonsterBuffs;// = new Dictionary<string,SpriteRenderer>();

	private bool BuffUpdate;

	void Update()
	{

		if (player.Health <= 0) {
			Debug.Log("You die!");
			DestroyWindow();

		} else if (monster.Health <= 0) {
			Debug.Log("monster dies!");
			DestroyWindow();
		}

		//Display Debuffs and Buffs



		//Blind 
		if (Time.time > PlayerBlindLength && PlayerBlindLength > 0) {
			PlayerAttackChance = (float) player.Accuracy / (float) monster.Evasion;
			player.IsBlinded = false;
			PlayerBlindLength = 0.0f;
			BuffUpdate = true;
			Debug.Log("Player is no longer blinded.");
		} 

		if (Time.time > MonsterBlindLength && MonsterBlindLength > 0) {
			MonsterAttackChance = (float) monster.Accuracy / (float) player.Evasion;
			monster.IsBlinded = false;
			MonsterBlindLength = 0.0f;
			BuffUpdate = true;
			Debug.Log("Monster is no longer blinded.");
		}
	

		//Poison
		if (player.IsPoisoned || monster.IsPoisoned) {
			DistributePoisonDamage();
		}

		if (BuffUpdate) {
			DisplayBuffs();
		}


		if(Input.GetKey("up") && Time.time > NextPlayerCombat) {
			NextPlayerCombat = Time.time + PlayerCombatSpeed + PlayerPause;
			PlayerAnimator.SetBool("attacking",true);
			IsPlayerDefending = false;

			if (!IsMonsterDefending) {

				roll = Random.Range(0f,1f); 

				if (PlayerAttackChance > roll) {
					Debug.Log("Hit for 1! monster Health: " + (monster.Health-1));
					monster.Health -= player.GetAttackValue();


					// Poison Chance
					//
					// Each attack, the actor has a chance to poison IF the actor IsPoisonous. 
					// If the other actor is already poisoned and it procs, the fade damage value is refreshed.
		
					roll = Random.Range(0f,1f);
					if (player.IsPoisonous && player.PoisonChance > roll) {
						BuffUpdate = true;
						Debug.Log("Monster is poisoned for " + player.PoisonDamageValue + " damage.");
						monster.TakingPoisonFadeValue = player.PoisonDamageValue;
						monster.TakingPoisonTickSpeed = player.PoisonTickSpeed;
						monster.IsPoisoned = true;		
					}

					// Blind Chance
					//
					// Each attack, the actor has a chance to poison IF the actor IsBlinding.
					// If the other actor is already blinded and it procs, the blind length is refreshed.
					roll = Random.Range(0f,1f);
					if (player.IsBlinding && player.BlindChance > roll) 
					{
						if(!monster.IsBlinded) {
							BuffUpdate = true;
							Debug.Log("Monster is blinded! Accuracy cut in half for " + player.BlindAttackLength + " seconds.");
							MonsterAttackChance = MonsterAttackChance / 2.0f;
							MonsterBlindLength = Time.time + player.BlindAttackLength;
							monster.IsBlinded = true;
						} else {
							BuffUpdate = true;
							Debug.Log("Monster is blinded! Accuracy cut in half for " + player.BlindAttackLength + " seconds.");
							MonsterBlindLength = Time.time + player.BlindAttackLength;
						}
					} 

				} else {
					Debug.Log("Player misses.");
				}		
			} else {
				Debug.Log("Monster blocks your attack!");
			}
		} else if (Input.GetKey("down") && Time.time > NextPlayerCombat) {
			NextPlayerCombat = Time.time + PlayerCombatSpeed + PlayerPause;
			PlayerAnimator.SetBool("defending",true);
			IsPlayerDefending = true;
		} else if (Time.time > NextPlayerCombat - PlayerPause) {
			PlayerAnimator.SetBool("attacking",false);
			PlayerAnimator.SetBool("defending",false);
			IsPlayerDefending = false;
		}


		//Monster Attack
		if (MonsterCurrAttacks < MonsterNumAttacks && Time.time > NextMonsterCombat) {

			NextMonsterCombat = Time.time + MonsterCombatSpeed + MonsterPause;
			MonsterAnimator.SetBool("attacking",true);
			IsMonsterDefending = false;
			MonsterCurrAttacks += 1;

			if (!IsPlayerDefending) {

				roll = Random.Range(0f,1f);

				if (MonsterAttackChance > roll) {


					Debug.Log("Take damage for 1! Your Health: " + player.Health);
					player.Health -= monster.GetAttackValue();

					//Poison
					roll = Random.Range(0f,1f);
					if (monster.IsPoisonous && monster.PoisonChance > roll) {
						BuffUpdate = true;
						Debug.Log("Monster is poisoned for " + monster.PoisonDamageValue + " damage");
						player.TakingPoisonFadeValue = monster.PoisonDamageValue;
						player.TakingPoisonTickSpeed = monster.PoisonTickSpeed;
						player.IsPoisoned = true;		
					}

					//Blind
					roll = Random.Range(0f,1f);
					if (monster.IsBlinding && monster.BlindChance > roll) 
					{
						if(!player.IsBlinded) {
							BuffUpdate = true;
							Debug.Log("Player is blinded! Accuracy cut in half for " + monster.BlindAttackLength + " seconds.");
							PlayerAttackChance = PlayerAttackChance / 2.0f;
							PlayerBlindLength = Time.time + monster.BlindAttackLength;
							player.IsBlinded = true;
						} else {
							BuffUpdate = true;
							Debug.Log("Player is blinded! Accuracy cut in half for " + monster.BlindAttackLength + " seconds.");
							PlayerBlindLength = Time.time + monster.BlindAttackLength;
						}
					} 

				} else {
					Debug.Log("Monster misses.");
				}

			} else {
				Debug.Log("You block monster's attack!");
			}
		} else if (MonsterCurrAttacks >= MonsterNumAttacks && Time.time > NextMonsterCombat) {
			NextMonsterCombat = Time.time + MonsterCombatSpeed + MonsterPause;
			MonsterAnimator.SetBool("defending",true);
			MonsterCurrAttacks = 0;
			IsMonsterDefending = true;
		} else if (Time.time > NextMonsterCombat - MonsterPause) {
			MonsterAnimator.SetBool("attacking",false);
			MonsterAnimator.SetBool("defending",false);
			IsMonsterDefending = false;
		}

	}

    public void Enable()
    {
		monster = (Monster)Instantiate(MonsterPrefab, transform.position, Quaternion.identity);
		Background = (SpriteRenderer)Instantiate(BackgroundPrefab, transform.position, Quaternion.identity);
		PlayerSprite = (SpriteRenderer)Instantiate(PlayerSpritePrefab, transform.position, Quaternion.identity);
		MonsterSprite = (SpriteRenderer)Instantiate(MonsterPrefab.GetComponent<SpriteRenderer>(),transform.position,Quaternion.identity);

		PlayerBuffs = new Dictionary<string,SpriteRenderer>();
		MonsterBuffs = new Dictionary<string,SpriteRenderer>();


		PlayerBuffs.Add("Poison",(SpriteRenderer)Instantiate(PoisonDebuff,transform.position, Quaternion.identity));
		MonsterBuffs.Add("Poison",(SpriteRenderer)Instantiate(PoisonDebuff,transform.position, Quaternion.identity));

		PlayerBuffs.Add("Blind",(SpriteRenderer)Instantiate(BlindDebuff, transform.position, Quaternion.identity));
		MonsterBuffs.Add("Blind",(SpriteRenderer)Instantiate(BlindDebuff, transform.position, Quaternion.identity));

		//PlayerCombatRate = player.CombatSpeed;
		//MonsterCombatRate = MonsterPrefab.CombatSpeed;
		
		Background.enabled = false;
		PlayerSprite.enabled = false;
		MonsterSprite.enabled = false;
		
		MonsterNumAttacks = monster.NumAttacks;
		
		PlayerAnimator = PlayerSprite.GetComponent<Animator>();
		MonsterAnimator = MonsterSprite.GetComponent<Animator>();


		//Set up visuals
		Vector3 pos = new Vector3(player.transform.position.x, player.transform.position.y, player.transform.position.z);

        Background.transform.position = pos;
        Background.enabled = true;
        Background.sortingLayerName = "Background";

        //Foreground.transform.position = pos;
        //Foreground.enabled = true;
        //Foreground.sortingLayerName = "Foreground";

        PlayerSprite.transform.position = new Vector3(player.transform.position.x - 2.6f, player.transform.position.y-1.1f, player.transform.position.z);
        PlayerSprite.enabled = true; 
        PlayerSprite.sortingLayerName = "Midground";

        MonsterSprite.transform.position = new Vector3(player.transform.position.x + 2.6f, player.transform.position.y - 1.1f, player.transform.position.z);
        MonsterSprite.enabled = true;
        MonsterSprite.sortingLayerName = "Midground";


		//
		Debug.Log("Player Accuracy / Evasion: " + player.Accuracy + " " + player.Evasion);
		Debug.Log("Monster Accuracy / Evasion: " + monster.Accuracy + " " + monster.Evasion);

		//Set Initial Attack Chances
		PlayerAttackChance = (float) player.Accuracy / (float) monster.Evasion;
		Debug.Log("Player Attack Chance = " + PlayerAttackChance);
		MonsterAttackChance = (float) monster.Accuracy / (float) player.Evasion;
		Debug.Log("Monster Attack Chance = " + MonsterAttackChance);


		PlayerAnimator.speed = 2;
    }

	public void DestroyWindow()
	{

		Destroy(monster);
		Destroy(PlayerSprite);
		Destroy(MonsterSprite);
		Destroy(Background);
		Destroy(this);
	}


	// Poison Damage
	//
	// Poison damage works as a "fading" poison. When an actor takes poison damage, the fade damage value is divided in half.
	// Once the fade damage value is below 1, the actor is no longer poisoned.
	//
	// For example: A player becomes poisoned. The first tick does 4 damage, the second does 2, the third does 1.
	//              After that, the player is no longer poisoned.

    public void DistributePoisonDamage()
	{
		//Distribute poison damage to Player
		if (player.IsPoisoned && Time.time > PlayerNextPoisonTick) { 

			PlayerNextPoisonTick = Time.time + player.TakingPoisonTickSpeed;
			
			Debug.Log("Player takes " + player.TakingPoisonFadeValue + " poison damage!");
			player.Health -= player.TakingPoisonFadeValue;
			
			
			
			if (player.TakingPoisonFadeValue <= 1) {
				player.IsPoisoned = false;
				BuffUpdate = true;
				player.TakingPoisonFadeValue = 0;
				player.TakingPoisonTickSpeed = 0;
				Debug.Log("Player is no longer poisoned.");
			}
			
			player.TakingPoisonFadeValue = player.TakingPoisonFadeValue / 2;
		}
		
		//Distribute poison damage to Monster
		if (monster.IsPoisoned && Time.time > MonsterNextPoisonTick) {

			MonsterNextPoisonTick = Time.time + monster.TakingPoisonTickSpeed;
			
			Debug.Log("Monster takes " + monster.TakingPoisonFadeValue + " poison damage!");
			monster.Health -= monster.TakingPoisonFadeValue;
			
			
			
			if (monster.TakingPoisonFadeValue <= 1) {
				monster.IsPoisoned = false;
				BuffUpdate = true;
				monster.TakingPoisonFadeValue = 0;
				monster.TakingPoisonTickSpeed = 0;
				Debug.Log("Monster is no longer poisoned.");
			}
			
			monster.TakingPoisonFadeValue = monster.TakingPoisonFadeValue / 2;
		}
	}

	public void DisplayBuffs() {

		Debug.Log("Displaying Debuffs");

		//Player Debuffs
		if(player.IsPoisoned) {
			PlayerBuffs["Poison"].enabled = true;
		} else {
			PlayerBuffs["Poison"].enabled = false;
			PlayerBuffs["Poison"].sortingLayerName = "Idle";
		}

		if(player.IsBlinded) {
			PlayerBuffs["Blind"].enabled = true;
		} else {
			PlayerBuffs["Blind"].enabled = false;
			PlayerBuffs["Blind"].sortingLayerName = "Idle";
		}

		//Monster Debuffs
		if (monster.IsPoisoned) {
			Debug.Log("Poison Debuff enabled");
			MonsterBuffs["Poison"].enabled = true;
		} else {
			MonsterBuffs["Poison"].enabled = false;
			MonsterBuffs["Poison"].sortingLayerName = "Idle";
		}

		if (monster.IsBlinded) {
			Debug.Log("Blind Debuff enabled");
			MonsterBuffs["Blind"].enabled = true;
		} else {
			MonsterBuffs["Blind"].enabled = false;
			MonsterBuffs["Blind"].sortingLayerName = "Idle";
		}

		/*
		Vector3 playerbuffs = new Vector3(-5, 2,0);

		foreach (SpriteRenderer buff in PlayerBuffs) {
			buff.transform.position = playerbuffs;
			buff.enabled = true;
			buff.sortingLayerName = "Foreground";
			playerbuffs.x += 1;
		}
		*/
		Vector3 playerbuffs = new Vector3(player.transform.position.x, player.transform.position.y, player.transform.position.z);

		playerbuffs.x -= 3;
		playerbuffs.y += 1;

		Dictionary<string,SpriteRenderer>.ValueCollection PlayerValues = PlayerBuffs.Values;

		foreach (SpriteRenderer pbuff in PlayerValues) {
			if (pbuff.enabled == true) {
				pbuff.transform.position = playerbuffs;
				pbuff.sortingLayerName = "Foreground";
				playerbuffs.x += 0.5f;
			}
		}

		Vector3 monsterbuffs = new Vector3(player.transform.position.x, player.transform.position.y, player.transform.position.z);

		monsterbuffs.x += 3;
		monsterbuffs.y += 1;

		Dictionary<string,SpriteRenderer>.ValueCollection MonsterValues = MonsterBuffs.Values;

		foreach (SpriteRenderer buff in MonsterValues) {
			if (buff.enabled == true) {
				buff.transform.position = monsterbuffs;
				buff.sortingLayerName = "Foreground";
				monsterbuffs.x -= 0.5f;
			}
		}

		BuffUpdate = false;
	}
}

